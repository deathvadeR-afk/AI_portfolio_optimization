# Portfolio Optimization Platform - Docker Compose Configuration
# Production-ready deployment with API, dashboard, and monitoring

version: '3.8'

services:
  # Portfolio Optimization API
  portfolio-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: portfolio-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=2
      - LOG_LEVEL=info
      - PYTHONPATH=/app/src
    volumes:
      - ./data:/app/data:ro
      - ./models:/app/models
      - ./logs:/app/logs
      - ./results:/app/results
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - portfolio-network

  # Web Dashboard (Nginx serving static files)
  portfolio-dashboard:
    image: nginx:alpine
    container_name: portfolio-dashboard
    ports:
      - "3000:80"
    volumes:
      - ./web:/usr/share/nginx/html:ro
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - portfolio-api
    restart: unless-stopped
    networks:
      - portfolio-network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: portfolio-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - portfolio-network

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: portfolio-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=portfolio_db
      - POSTGRES_USER=portfolio_user
      - POSTGRES_PASSWORD=portfolio_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - portfolio-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: portfolio-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - portfolio-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: portfolio-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - portfolio-network

  # Data collection service (scheduled job)
  data-collector:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: portfolio-data-collector
    environment:
      - PYTHONPATH=/app/src
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    command: >
      sh -c "
        echo 'Starting data collection service...' &&
        while true; do
          echo 'Running data collection...' &&
          python scripts/collect_data.py --all --period 1d &&
          echo 'Data collection completed. Sleeping for 1 hour...' &&
          sleep 3600
        done
      "
    depends_on:
      - portfolio-api
    restart: unless-stopped
    networks:
      - portfolio-network

# Networks
networks:
  portfolio-network:
    driver: bridge

# Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
